/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package joguinho2d;

import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JFrame;
import sun.audio.AudioData;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;
import sun.audio.ContinuousAudioDataStream;
import sun.java2d.pipe.DrawImage;
/**
 *
 * @author Cliente
 */
public class FRMjoguinho extends JFrame implements Runnable{

    private boolean left;
    private boolean right;
    private boolean fimJogo;
    private boolean keyRestart;
    
    
    
    public FRMjoguinho() {
        initComponents();
        createBufferStrategy(2);
        Thread t = new Thread(this);
        setSize(900, 900);
        t.start();
        this.setTitle("Street Crash");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = true;
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = false;
        }
    }//GEN-LAST:event_formKeyReleased
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FRMjoguinho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FRMjoguinho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FRMjoguinho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FRMjoguinho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FRMjoguinho().setVisible(true);
                
            }
        });
    }
    
     @Override
    public void run() {
        Graphics g;

        ArrayList<Base> lista = new ArrayList();
        int score=0;
        Carro player = new Carro("Imagens/carro1.png");
        player.setIncY(0);
        player.setIncX(0);
        player.setY((getHeight() - player.getAltura())-20);
        player.setX(getWidth()/2);
        player.setLargura(110);
        player.setAltura(200);
        lista.add(player);
        
        Fogo fire = new Fogo("Imagens/fogo.gif");
        fire.setX(player.getX());
        fire.setY(player.getY());
        fire.setIncX(0);
        fire.setIncY(0);
        fire.setAltura(0);
        fire.setLargura(0);
        
        

        Random rand = new Random();
        boolean bateu = false;
        long ultimotempo = 0;
        int high = 0;
        //long aux = 0;
       
            
        while (true) {
            
            g = getBufferStrategy().getDrawGraphics();
            
            
            g.setColor(Color.GREEN);
            
            g.fillRect(0, 0, getWidth(), getHeight());
            g.setColor(Color.GRAY);
            g.fillRect(160, 0, 600, getHeight());
            g.setColor(Color.WHITE);
            g.fillRect(getWidth()/2, 0, 3, getHeight());
            
            
            
            for (Base b : lista) {
                b.mover();
            }

            
            for (Base b : lista) {
                b.desenhar(g);
            }

            
            long tempo = System.currentTimeMillis();
            
            if(tempo > (ultimotempo + 750) && fimJogo==false){
                ultimotempo = tempo+200;
                List<String> givenList1 = Arrays.asList("Imagens/os1.png", "Imagens/os2.png");
                String randomElement1 = givenList1.get(rand.nextInt(givenList1.size()));
                Obstaculo crash = new Obstaculo(randomElement1);
                List<Integer> givenList = Arrays.asList(((getWidth()/4)*1)-50, ((getWidth()/4)*1)+112, ((getWidth()/4)*2)+90, ((getWidth()/4)*2), (getWidth()/4)*3);
                int randomElement = givenList.get(rand.nextInt(givenList.size()));
                crash.setX(randomElement);
                crash.setY(-100);
                crash.setIncY(1);
                crash.setIncX(0);
                crash.setAltura(10);
                crash.setLargura(60);
                lista.add(crash);
            }
            
             for (Base b : lista) {
                 if (player.colisao(b)) {
                    bateu=true;
                }
                if(b.getY() > player.getY() && fimJogo==false){
                    score++;
                }
                g.setColor(Color.BLACK);
                g.drawString("Pontos:"+score, 800, 800);
                g.drawString("High:"+high, 800, 810);
                
                
            }
             
             
            
            if (bateu==true) {
                g.setColor(Color.BLACK);
                g.drawString("GAME OVER - Tecle R para Reiniciar", (getWidth()/2)-100, getHeight()/2);
                lista.removeAll(lista);
                fire.setIncY(0);
                fire.setX(player.getX());
                fire.setY(player.getY());
                lista.add(fire);
                
//                try{
//                    aux=tempo;
//                    AudioInputStream audio = AudioSystem.getAudioInputStream(new File("C:\\Users\\150140\\Desktop\\Joguinho2D-V3\\Joguinho2D-20180917T235404Z-001\\Joguinho2D\\build\\classes\\Audio\\Noise 004.wav"));
//                    Clip clip = AudioSystem.getClip();
//                    clip.open(audio);
//                    clip.start();
//                }catch(Exception ex){}
                
                if(score>high){
                   high = score;
                }
                
                fimJogo = true;
                
            }

            if (fimJogo && keyRestart) {
                bateu=false;
                fire.setIncY(1000);
                lista.add(player);
                score=0;
                fimJogo = false;
            }

            if (left && (player.getX()>170)) {
                player.setIncX(-1);
            } else {
                if (right && (player.getX()<610)) {
                    player.setIncX(1);
                } else {
                    player.setIncX(0);
                }
            }

            
            g.dispose();
            getBufferStrategy().show();
            try {
                Thread.sleep(5);
            } catch (InterruptedException ex) {
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
